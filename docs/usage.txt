Using django-filter
-------------------

Django-filter provides a simple way to filter down a queryset based on 
parameters a user provides.  Say we have a ``Product`` model and we want to let 
our users filter which products they see on a list page.  Let's start with our
model::
    
    from django.db import models
    
    class Product(models.Model):
        name = models.CharField(max_length=255)
        price = models.DecimalField()
        description = models.TextField()
        release_date = models.DateField()

We have a number of fields and we want to let our users filter based on the 
price or the release_date.  We create a ``FilterSet`` for this::
    
    import filter
    
    class ProductFilter(FilterSet):
        class Meta:
            model = Product
            fields = ['price', 'release_date']


As you can see this uses a very similar API to Django's ``ModelForm``.  Just 
like with a ``ModelForm`` we can also overide filters, or add new ones using a 
declarative syntax.

Now we need to write a view::
    
    def product_list(request):
        f = ProductFilter(request.GET)
        return render_to_response('my_app/templtae.html', {'f': f})

And lastly we need a template::
    
    {% extends "base.html" %}
    
    {% block content %}
        <form action="" method="get">
            {{ f.form.as_p }}
        </form>
        {% for obj in f %}
            {{ obj.name }} - ${{ obj.price }}
        {% endfor %}
    {% endblock %}

And that's all there is to it!  The ``form`` attribute contains a normal 
Django form, and when we iterate over the ``FilterSet`` we get the objects in 
the resulting queryset.

You can also allow the user to control ordering, this is done by providing the
``order_by`` argument in the Filter's Meta class.  ``order_by`` can be either a 
``list`` or ``tuple`` of field names, in which case those are the options, or 
it can be a ``bool`` which, if True, indicates that all fields that have 
the user can filter on can also be sorted on.
