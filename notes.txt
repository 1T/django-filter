Filterer
========

Usage:

class EntryFilterer(filter.Filterer):
    author = filter.ChoiceFilterer(widget=forms.CheckBox)
    has_comments = filter.BooleanFilterer(action = lambda qs: qs.annotate(num_comments=Count('comments')).filter(num_comments__gt=0))
    
    class Meta:
        model = Entry
        fields = ["title", "author"]

def my_view(request):
    f = EntryFilterer(request.GET)
    return render_to_respones("template.html", {'f': f})

{% extends "base.html" %}

{% block content %}
    {{ f.filters }}
    {% for entry in f %}
        {{ entry.title }}
    {% endfor %}
{% endblock %}

Similar structure to ModelForms, Meta sets the model and fields/excludes.  You 
can overide a filterer, set it's widget to the form field widget, provide a 
custom action.
